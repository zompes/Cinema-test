{
	"info": {
		"_postman_id": "6413c0d9-6c65-46ee-952d-155994ac580f",
		"name": "Cinema-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24815915"
	},
	"item": [
		{
			"name": "Create users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let initialMockData = [{",
							"  \"email\": \"clisciandri0@msu.edu\",",
							"  \"password\": \"cZHJtKsCEi\",",
							"  \"firstName\": \"Conway\",",
							"  \"lastName\": \"Lisciandri\",",
							"  \"phoneNumber\": \"590-427-8500\"",
							"}, {",
							"  \"email\": \"cyesson1@jiathis.com\",",
							"  \"password\": \"FjCXeIM8\",",
							"  \"firstName\": \"Cindy\",",
							"  \"lastName\": \"Yesson\",",
							"  \"phoneNumber\": \"845-561-3383\"",
							"}, {",
							"  \"email\": \"satwool2@4shared.com\",",
							"  \"password\": \"PDDrR9\",",
							"  \"firstName\": \"Sal\",",
							"  \"lastName\": \"Atwool\",",
							"  \"phoneNumber\": \"217-299-5700\"",
							"}, {",
							"  \"email\": \"lcuckoo3@facebook.com\",",
							"  \"password\": \"1EqljET6pUl\",",
							"  \"firstName\": \"Lynda\",",
							"  \"lastName\": \"Cuckoo\",",
							"  \"phoneNumber\": \"500-332-3351\"",
							"}, {",
							"  \"email\": \"hadshed4@jugem.jp\",",
							"  \"password\": \"cvJHV7EmC52\",",
							"  \"firstName\": \"Helena\",",
							"  \"lastName\": \"Adshed\",",
							"  \"phoneNumber\": \"947-347-0386\"",
							"}];",
							"",
							"// In order to remember mockData we need to save it as",
							"// an environment variable (that will survive between requests)",
							"// unfortunately you have to use pm.environment.set('variable name', 'variable value')",
							"// to do so and you can ONLY use strings as values, so",
							"// we need to stringify mockData as JSON:",
							"",
							"// only set mockData if not stored already",
							"if(!pm.environment.get('mockData')){",
							"   pm.environment.set('mockData', JSON.stringify(initialMockData));",
							"   // also save which user to create as a userIndex",
							"   pm.environment.set('userIndex', '0');",
							"}",
							"",
							"// ------------------------------------------------------------------------------",
							"",
							"// Unpack environment variables into normal local variables",
							"let mockData = JSON.parse(pm.environment.get('mockData'));",
							"let userIndex = +pm.environment.get('userIndex');",
							"",
							"let user = mockData[userIndex];",
							"",
							"// set user properties as environement variables",
							"for(let [key,val] of Object.entries(user)){",
							"    pm.environment.set(key,val);",
							"}",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// The response from the server",
							"let response = pm.response.json();",
							"",
							"// Status code 200 = Ok, no server error",
							"pm.test('Expect status code 200', () => {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"// affectedRows = rows added in db",
							"pm.test(\"Check that affected rows is 1\", () => {",
							"    pm.expect(response.affectedRows).to.equal(1);",
							"});",
							"",
							"// Auto increement id: starts at 1 in SQL",
							"pm.test(\"Check that insertId is > 0\", () => {",
							"    pm.expect(response.insertId).to.be.above(0);",
							"});",
							"",
							"// Unpack environment variables into normal local variables",
							"let mockData = JSON.parse(pm.environment.get('mockData'));",
							"let userIndex = +pm.environment.get('userIndex');",
							"",
							"// Add id to mockData",
							"mockData[userIndex].id = response.insertId;",
							"",
							"// Repack changed data to environment variables",
							"pm.environment.set('mockData', JSON.stringify(mockData));",
							"",
							"// Add 1 to userIndex and check if there is another user to add",
							"userIndex++;",
							"",
							"if(!mockData[userIndex]){",
							"    // all users added, reset userIndex to zero for next request",
							"    pm.environment.set('userIndex','0');",
							"}",
							"else {",
							"    // \"loop\" - add the next user by repeating this request",
							"    pm.environment.set('userIndex', userIndex);",
							"    postman.setNextRequest('Create users');",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"phoneNumber\": \"{{phoneNumber}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Unpack environment variables into normal local variables",
							"let mockData = JSON.parse(pm.environment.get('mockData'));",
							"let userIndex = +pm.environment.get('userIndex');",
							"// Current user",
							"let user = mockData[userIndex];",
							"",
							"// Set the users id as an environment variable",
							"pm.environment.set('id', user.id);",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Unpack environment variables into normal local variables",
							"let mockData = JSON.parse(pm.environment.get('mockData'));",
							"let userIndex = +pm.environment.get('userIndex');",
							"// Current user",
							"let user = mockData[userIndex];",
							"",
							"let response = pm.response.json();",
							"",
							"// Status code 200 = Ok, no server error",
							"pm.test('Expect status code 200', () => {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"// Test that the mockData previously used to",
							"// create the user in the DB has indentical values",
							"// for all properties compared to what we are reading from the DB",
							"// but omit password from this check...",
							"pm.test('Expect db values to equal original values for user', () => {",
							"    let userWithoutPassword = {...user, password: null};",
							"    let responseWithoutPassword = {...response, password: null};",
							"    pm.expect(userWithoutPassword).to.deep.equal(responseWithoutPassword);",
							"});",
							"",
							"// Add 1 to userIndex and check if there is another user to add",
							"userIndex++;",
							"",
							"if(!mockData[userIndex]){",
							"    // all users added, reset userIndex to zero for next request",
							"    pm.environment.set('userIndex','0');",
							"}",
							"else {",
							"    // \"loop\" - add the next user by repeating this request",
							"    pm.environment.set('userIndex', userIndex);",
							"    postman.setNextRequest('Read users');",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/api/users/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change email/number",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let mockData = JSON.parse(pm.environment.get('mockData'));\r",
							"let userIndex = +pm.environment.get('userIndex');\r",
							"\r",
							"if (userIndex === 0){\r",
							"\r",
							"    let changeMockData = [{\r",
							"    \"email\": \"realemail@gmail.com\",\r",
							"    \"phoneNumber\": \"111-333-9999\"\r",
							"    }, {\r",
							"    \"email\": \"cyesson1@gmail.com\",\r",
							"    \"phoneNumber\": \"222-555-8888\"\r",
							"    }, {\r",
							"    \"email\": \"satwool2@hotmail.com\",\r",
							"    \"phoneNumber\": \"001-000-7584\"\r",
							"    }, {\r",
							"    \"email\": \"lcuckoo3@hotmail.com\",\r",
							"    \"phoneNumber\": \"002-555-9600\"\r",
							"    }, {\r",
							"    \"email\": \"hadshed4@gmail.jp\",\r",
							"    \"phoneNumber\": \"003-555-2626\"\r",
							"    }];\r",
							"\r",
							"    // add the above changes to the mockdata\r",
							"    let counter = 0;\r",
							"    for(let change of changeMockData){\r",
							"        for(let [key,val] of Object.entries(change)){\r",
							"            mockData[counter][key] = val;\r",
							"        }\r",
							"        counter++;\r",
							"    }\r",
							"    pm.environment.set(\"mockData\", JSON.stringify(mockData));\r",
							"\r",
							"}\r",
							"\r",
							"// get a mock data user\r",
							"let user = mockData[userIndex];\r",
							"// set each property of the user as an environment variable\r",
							"for(let [key,val] of Object.entries(user)){\r",
							"    pm.environment.set(key,val);\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// The response from the server\r",
							"let response = pm.response.json();\r",
							"\r",
							"// Status code 200 = Ok, no server error\r",
							"pm.test('Expect status code 200', () => {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// affectedRows = rows added in db\r",
							"pm.test(\"Check that affected rows is 1\", () => {\r",
							"    pm.expect(response.affectedRows).to.equal(1);\r",
							"});\r",
							"\r",
							"// Unpack environment variables into normal local variables\r",
							"let mockData = JSON.parse(pm.environment.get('mockData'));\r",
							"let userIndex = +pm.environment.get('userIndex');\r",
							"\r",
							"// Add 1 to userIndex and check if there is another user to add\r",
							"userIndex++;\r",
							"\r",
							"if(!mockData[userIndex]){\r",
							"    // all users added, reset userIndex to zero for next request\r",
							"    pm.environment.set('userIndex','0');\r",
							"}\r",
							"else {\r",
							"    // \"loop\" - add the next user by repeating this request\r",
							"    pm.environment.set('userIndex', userIndex);\r",
							"    postman.setNextRequest('Change email/number');\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"phoneNumber\": \"{{phoneNumber}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/users/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get changes",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Unpack environment variables into normal local variables\r",
							"let mockData = JSON.parse(pm.environment.get('mockData'));\r",
							"let userIndex = +pm.environment.get('userIndex');\r",
							"// Current user\r",
							"let user = mockData[userIndex];\r",
							"\r",
							"// Set the users id as an environment variable\r",
							"pm.environment.set('id', user.id);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Unpack environment variables into normal local variables\r",
							"let mockData = JSON.parse(pm.environment.get('mockData'));\r",
							"let userIndex = +pm.environment.get('userIndex');\r",
							"// Current user\r",
							"let user = mockData[userIndex];\r",
							"\r",
							"let response = pm.response.json();\r",
							"\r",
							"// Status code 200 = Ok, no server error\r",
							"pm.test('Expect status code 200', () => {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Test that the mockData previously used to\r",
							"// create the user in the DB has indentical values\r",
							"// for all properties compared to what we are reading from the DB\r",
							"// but omit password from this check...\r",
							"pm.test('Expect db values to equal original values for user', () => {\r",
							"    let userWithoutPassword = {...user, password: null};\r",
							"    let responseWithoutPassword = {...response, password: null};\r",
							"    pm.expect(userWithoutPassword).to.deep.equal(responseWithoutPassword);\r",
							"});\r",
							"\r",
							"// Add 1 to userIndex and check if there is another user to add\r",
							"userIndex++;\r",
							"\r",
							"if(!mockData[userIndex]){\r",
							"    // all users added, reset userIndex to zero for next request\r",
							"    pm.environment.set('userIndex','0');\r",
							"}\r",
							"else {\r",
							"    // \"loop\" - add the next user by repeating this request\r",
							"    pm.environment.set('userIndex', userIndex);\r",
							"    postman.setNextRequest('Get changes');\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/api/users/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Unpack environment variables into normal local variables",
							"let mockData = JSON.parse(pm.environment.get('mockData'));",
							"let userIndex = +pm.environment.get('userIndex');",
							"// Current user",
							"let user = mockData[userIndex];",
							"",
							"// Set the users id as an environment variable",
							"pm.environment.set('id', user.id);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Unpack environment variables into normal local variables",
							"let mockData = JSON.parse(pm.environment.get('mockData'));",
							"let userIndex = +pm.environment.get('userIndex');",
							"",
							"let response = pm.response.json();",
							"",
							"// Status code 200 = Ok, no server error",
							"pm.test('Expect status code 200', () => {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"// affectedRows = rows deleted in db",
							"pm.test(\"Check that affected rows is 1\", () => {",
							"    pm.expect(response.affectedRows).to.equal(1);",
							"});",
							"",
							"// Add 1 to userIndex and check if there is another user to add",
							"userIndex++;",
							"",
							"if(!mockData[userIndex]){",
							"    // all users added, reset userIndex to zero for next request",
							"    pm.environment.set('userIndex','0');",
							"}",
							"else {",
							"    // \"loop\" - add the next user by repeating this request",
							"    pm.environment.set('userIndex', userIndex);",
							"    postman.setNextRequest('Delete users');",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/api/users/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}