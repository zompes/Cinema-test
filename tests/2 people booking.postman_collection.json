{
	"info": {
		"_postman_id": "21ff75d8-5e2d-43e9-b3ff-98eb59664345",
		"name": "2 people booking",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24815915"
	},
	"item": [
		{
			"name": "Find free seats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"// from comma separarted string to array of number\r",
							"let occupied = response[0].occupiedSeats.split(\", \").map(x => +x);\r",
							"// i know screening 1 is always Stora Salongen, with 81 seats\r",
							"// get the free seats\r",
							"let freeSeats = [];\r",
							"for(let i = 1; i <=81;i++){\r",
							"    if(!occupied.includes(i)){ freeSeats.push(i); }\r",
							"}\r",
							"\r",
							"// save the first two free seats as environment variables\r",
							"pm.environment.set(\"seat1\", freeSeats[0]);\r",
							"pm.environment.set(\"seat2\", freeSeats[1]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/occupied_seats?screeningId=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"occupied_seats"
					],
					"query": [
						{
							"key": "screeningId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let bookingData = {\r",
							"    \"bookingNumber\": generateBookingNumber(),\r",
							"    \"screeningId\": \"1\",\r",
							"    \"userId\": \"1\"\r",
							"}\r",
							"\r",
							"for(let [key,val] of Object.entries(bookingData)){\r",
							"    pm.environment.set(key,val);\r",
							"}\r",
							"\r",
							"function generateBookingNumber() {\r",
							"  let no = '';\r",
							"  while (no.length < 3) {\r",
							"    no += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[Math.floor(Math.random() * 26)];\r",
							"  }\r",
							"  while (no.length < 6) {\r",
							"    no += Math.floor(Math.random() * 10);\r",
							"  }\r",
							"  return no;\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// The response from the server\r",
							"let response = pm.response.json();\r",
							"\r",
							"// Status code 200 = Ok, no server error\r",
							"pm.test('Expect status code 200', () => {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// affectedRows = rows added in db\r",
							"pm.test(\"Check that affected rows is 1\", () => {\r",
							"    pm.expect(response.affectedRows).to.equal(1);\r",
							"});\r",
							"\r",
							"// Auto increement id: starts at 1 in SQL\r",
							"pm.test(\"Check that insertId is > 0\", () => {\r",
							"    pm.expect(response.insertId).to.be.above(0);\r",
							"});\r",
							"\r",
							"// Remember the id of the newly created booking\r",
							"pm.environment.set(\"bookingId\", response.insertId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookingNumber\": \"{{bookingNumber}}\",\r\n    \"screeningId\": \"{{screeningId}}\",\r\n    \"userId\": \"{{userId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/bookings",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"bookings"
					]
				}
			},
			"response": []
		},
		{
			"name": "seat1",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookingId\": {{bookingId}},\r\n    \"seatId\": {{seat1}},\r\n    \"ticketTypeId\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/bookingsxseats",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"bookingsxseats"
					]
				}
			},
			"response": []
		},
		{
			"name": "seat2",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookingId\": {{bookingId}},\r\n    \"seatId\": {{seat2}},\r\n    \"ticketTypeId\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/bookingsxseats",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"bookingsxseats"
					]
				}
			},
			"response": []
		},
		{
			"name": "VIEW occupied_seats",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json()[0];\r",
							"\r",
							"let seat1 = pm.environment.get(\"seat1\");\r",
							"let seat2 = pm.environment.get(\"seat2\");\r",
							"\r",
							"pm.test('Expect view occupiedseats_seats to include the booked seats', () => {\r",
							"    pm.expect(response.occupiedSeats).to.include(seat1 + \", \" + seat2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/api/occupied_seats?screeningId=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"occupied_seats"
					],
					"query": [
						{
							"key": "screeningId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VIEW bookings_overview",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json()[0];\r",
							"\r",
							"let seat1 = pm.environment.get(\"seat1\");\r",
							"let seat2 = pm.environment.get(\"seat2\");\r",
							"\r",
							"pm.test('Expect view bookings_overview to include the booking', () => {\r",
							"    pm.expect(response.seats).to.equal(seat1 + \", \" + seat2);\r",
							"});\r",
							"\r",
							"pm.test('Expect view bookings_overview to include the booking', () => {\r",
							"    pm.expect(response.ticketTypes).to.equal(\"Senior, Senior\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/bookings_overview/?bookingNumber={{bookingNumber}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"bookings_overview",
						""
					],
					"query": [
						{
							"key": "bookingNumber",
							"value": "{{bookingNumber}}"
						}
					]
				}
			},
			"response": []
		}
	]
}